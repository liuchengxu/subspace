initSidebarItems({"constant":[["KEY_TYPE","Key type for Subspace pallet."],["MEDIAN_ALGORITHM_CARDINALITY","How many blocks to wait before running the median algorithm for relative time This will not vary from chain to chain as it is not dependent on slot duration or epoch length."],["SUBSPACE_ENGINE_ID","The `ConsensusEngineId` of Subspace."]],"enum":[["ConsensusLog","An consensus log item for Subspace."]],"fn":[["check_equivocation_proof","Verifies the equivocation proof by making sure that: both headers have different hashes, are targeting the same slot, and have valid signatures by the same authority."]],"mod":[["digests","Private implementation details of Subspace consensus digests."],["inherents","Inherents for Subspace consensus"],["offence","Common traits and types that are useful for describing offences for usage in environments that use staking."]],"struct":[["Epoch","Subspace epoch information"],["OpaqueKeyOwnershipProof","An opaque type used to represent the key ownership proof at the runtime API boundary. The inner value is an encoded representation of the actual key ownership proof which will be parameterized when defining the runtime. At the runtime API boundary this type is unknown and as such we keep this opaque representation, implementors of the runtime API will have to make sure that all usages of `OpaqueKeyOwnershipProof` refer to the same type."],["SubspaceEpochConfiguration","Configuration data used by the Subspace consensus engine."],["SubspaceGenesisConfiguration","Configuration data used by the Subspace consensus engine."]],"trait":[["SubspaceApi","API necessary for block authorship with Subspace."]],"type":[["EquivocationProof","An equivocation proof for multiple block authorships on the same slot (i.e. double vote)."],["FarmerPublicKey","A Subspace farmer identifier. Necessarily equivalent to the schnorrkel public key used in the main Subspace module. If that ever changes, then this must, too."],["FarmerSignature","A Subspace farmer signature."],["SubspaceBlockWeight","The cumulative weight of a Subspace block, i.e. sum of block weights starting at this block until the genesis block."]]});